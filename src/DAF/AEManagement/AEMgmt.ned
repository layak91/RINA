// The MIT License (MIT)
//
// Copyright (c) 2014-2016 Brno University of Technology, PRISTINE project
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package rina.src.DAF.AEManagement;

simple AEMgmt
{
    parameters:
    	@display("i=block/control");
    	
    	@signal[RIBd-DataSend](type=CDAPMessage?);
    	@signal[RIBd-CreateFlow](type=Flow?);    	
    	@signal[RIBd-CreateRequestFlow](type=Flow?);
    	@signal[RIBd-CreateFlowResponsePositive](type=Flow?);
    	@signal[RIBd-CreateFlowResponseNegative](type=Flow?);
    	@signal[RIBd-DeleteRequestFlow](type=Flow?);
    	@signal[RIBd-DeleteResponseFlow](type=Flow?);
    	@signal[AEorRIBd-AllocateResponsePositive](type=Flow?);
    	@signal[RIBd-CongestionNotification](type=CongestionDescriptor?);
    	
        @signal[RIBd-StartEnrollmentRequest](type=CDAPMessage?);
        @signal[RIBd-StartEnrollmentResponse](type=CDAPMessage?);
        @signal[RIBd-StopEnrollmentRequest](type=CDAPMessage?);
        @signal[RIBd-StopEnrollmentResponse](type=CDAPMessage?);
        @signal[RIBd-StartOperationRequest](type=CDAPMessage?);
        @signal[RIBd-StartOperationResponse](type=CDAPMessage?);
        
        @signal[RIBd-ConnectionResponsePositive](type=CDAPMessage?);
        @signal[RIBd-ConnectionResponseNegative](type=CDAPMessage?);
        @signal[RIBd-ConnectionRequest](type=CDAPMessage?);
        @signal[RIBd-CACEDataSend](type=CDAPMessage?);
}
